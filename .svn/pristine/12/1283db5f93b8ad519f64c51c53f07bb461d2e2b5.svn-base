[文件路径: tree/diy_async.html]
<script type="text/javascript">
SyntaxHighlighter.highlight("ts_diy_async");
</script>
	<!-- 示例1 -->
	<div class="barTitle2">
		<div class="content">示例</div>
	</div>
    <hr class="barTitleHr"/>
    <div class="ui-table ui-widget ui-corner-all ui-border">    
<div class="content_wrap">
	<div class="zTreeDemoBackground left">
		<ul id="treeDemo_diy_async" class="ztree"></ul>
	</div>
	<div class="right">
		<ul class="info">
			<li class="title"><h2>1、大数据量加载说明</h2>
				<ul class="list">
				<li>1)、对于某一级节点数多达几千个的时候，默认的延迟加载是无效的.</li>
				<li class="highlight_red">2)、此方法适用于1、2千个节点必须全部显示的需求。</li>
				<li class="highlight_red">3)、此方法并不能解决加载慢的问题，相反只会让最终结果出现的更慢，只是可以有限度的避免浏览器假死，而且显示的节点越多就越慢。</li>
					async load log:<br/>
					<ul id="log_diy_async" class="log" style="height:85px"></ul></li>
				</ul>
			</li>
			<li class="title"><h2>2、setting 配置信息说明</h2>
				<ul class="list">
				<li>需要设置 setting.async 异步加载部分的参数</li>
				<li>建议关闭动画效果 setting.view.expandSpeed = "";</li>
				<li>其他不需要进行特殊的配置，根据自己的需求自行设置</li>
				</ul>
			</li>
			<li class="title"><h2>3、treeNode 节点数据说明</h2>
				<ul class="list">
				<li>对 节点数据 没有特殊要求，用户可以根据自己的需求添加自定义属性</li>
				</ul>
			</li>
		</ul>
	</div>
</div>
			
			<!--源代码部分start-->
     	<div class="clear"></div>
		<div  class="sourceBar iconPlus mt1"><a href="#source1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码说明</a></div>
		<div  class="code" style="display: none" name="ts_diy_async">
<pre class="brush: js;">
html部分:

&lt;ul id="treeDemo_diy_async" class="ztree"&gt;&lt;/ul&gt;

js部分:

var zNodes =[
	{name:"500个节点", id:"1", count:500, times:1, isParent:true},
	{name:"1000个节点", id:"2", count:1000, times:1, isParent:true},
	{name:"2000个节点", id:"3", count:2000, times:1, isParent:true}
];

var log_diy_async, className = "dark",
startTime = 0, endTime = 0, perCount = 100, perTime = 100;
function getUrl(treeId, treeNode) {
	var curCount = (treeNode.children) ? treeNode.children.length : 0;
	var getCount = (curCount + perCount) &gt; treeNode.count ? (treeNode.count - curCount) : perCount;
	var param = "id="+treeNode.id+"_"+(treeNode.times++) +"&count="+getCount;
	return "../FrontEndSampleCenter/tree/asyncData/getNodesForBigData.jsp?" + param;
}
function beforeExpand(treeId, treeNode) {
	if (!treeNode.isAjaxing) {
		startTime = new Date();
		treeNode.times = 1;
		ajaxGetNodes(treeNode, "refresh");
		return true;
	} else {
		alert("zTree 正在下载数据中，请稍后展开节点。。。");
		return false;
	}
}
function onAsyncSuccess(event, treeId, treeNode, msg) {
	if (!msg || msg.length == 0) {
		return;
	}
	
	totalCount = treeNode.count;
	if (treeNode.children.length &lt; totalCount) {
		setTimeout(function() {ajaxGetNodes(treeNode);}, perTime);
	} else {
		treeNode.icon = "";
		treeObj.updateNode(treeNode);
		treeObj.selectNode(treeNode.children[0]);
		endTime = new Date();
		var usedTime = (endTime.getTime() - startTime.getTime())/1000;
		className = (className === "dark" ? "":"dark");
		showLog("[ "+getTime()+" ]&nbsp;&nbsp;treeNode:" + treeNode.name );
		showLog("加载完毕，共进行 "+ (treeNode.times-1) +" 次异步加载, 耗时："+ usedTime + " 秒");
	}
}
function onAsyncError(event, treeId, treeNode, XMLHttpRequest, textStatus, errorThrown) {

	alert("异步获取数据出现异常。");
	treeNode.icon = "";
	treeObj.updateNode(treeNode);
}
function ajaxGetNodes(treeNode, reloadType) {

	if (reloadType == "refresh") {
		treeNode.icon = "./lib/style/skin/default/components/tree/img/loading.gif";
		treeObj.updateNode(treeNode);
	}
	treeObj.reAsyncChildNodes(treeNode, reloadType, true);
}
function showLog(str) {
	if (!log_diy_async) log_diy_async = $("#log_diy_async");
	log_diy_async.append("&lt;li class='"+className+"'&gt;"+str+"&lt;/li&gt;");
	if(log_diy_async.children("li").length &gt; 4) {
		log_diy_async.get(0).removeChild(log_diy_async.children("li")[0]);
	}
}
function getTime() {
	var now= new Date();
	var h=now.getHours();
	var m=now.getMinutes();
	var s=now.getSeconds();
	ms=now.getMilliseconds();
	return (h+":"+m+":"+s+ " " +ms);
}
var setting_diy_async = {
    id:"#treeDemo_diy_async",
     nodes:zNodes,  //数据节点指定
	async: {
		enable: true,
		url: getUrl
	},
	check: {
		enable: true
	},
	data: {
		simpleData: {
			enable: true
		}
	},
	view: {
		expandSpeed: ""
	},
	callback: {
		beforeExpand: beforeExpand,
		onAsyncSuccess: onAsyncSuccess,
		onAsyncError: onAsyncError
	}
};
var treeObj;
$(document).ready(function(){
	 treeObj = new biz.tree(setting_diy_async);//创建树

});
           </pre>

       </div>
</div>

       <!--源代码部分end-->

<script type="text/javascript">

var zNodes =[
	{name:"500个节点", id:"1", count:500, times:1, isParent:true},
	{name:"1000个节点", id:"2", count:1000, times:1, isParent:true},
	{name:"2000个节点", id:"3", count:2000, times:1, isParent:true}
];

var log_diy_async, className = "dark",
startTime = 0, endTime = 0, perCount = 100, perTime = 100;
function getUrl(treeId, treeNode) {
	var curCount = (treeNode.children) ? treeNode.children.length : 0;
	var getCount = (curCount + perCount) > treeNode.count ? (treeNode.count - curCount) : perCount;
	var param = "id="+treeNode.id+"_"+(treeNode.times++) +"&count="+getCount;
	return "../FrontEndSampleCenter/tree/asyncData/getNodesForBigData.jsp?" + param;
}
function beforeExpand(treeId, treeNode) {
	if (!treeNode.isAjaxing) {
		startTime = new Date();
		treeNode.times = 1;
		ajaxGetNodes(treeNode, "refresh");
		return true;
	} else {
		alert("zTree 正在下载数据中，请稍后展开节点。。。");
		return false;
	}
}
function onAsyncSuccess(event, treeId, treeNode, msg) {
	if (!msg || msg.length == 0) {
		return;
	}
	
	totalCount = treeNode.count;
	if (treeNode.children.length < totalCount) {
		setTimeout(function() {ajaxGetNodes(treeNode);}, perTime);
	} else {
		treeNode.icon = "";
		treeObj.updateNode(treeNode);
		treeObj.selectNode(treeNode.children[0]);
		endTime = new Date();
		var usedTime = (endTime.getTime() - startTime.getTime())/1000;
		className = (className === "dark" ? "":"dark");
		showLog("[ "+getTime()+" ]&nbsp;&nbsp;treeNode:" + treeNode.name );
		showLog("加载完毕，共进行 "+ (treeNode.times-1) +" 次异步加载, 耗时："+ usedTime + " 秒");
	}
}
function onAsyncError(event, treeId, treeNode, XMLHttpRequest, textStatus, errorThrown) {

	alert("异步获取数据出现异常。");
	treeNode.icon = "";
	treeObj.updateNode(treeNode);
}
function ajaxGetNodes(treeNode, reloadType) {

	if (reloadType == "refresh") {
		treeNode.icon = "./lib/style/skin/default/components/tree/img/loading.gif";
		treeObj.updateNode(treeNode);
	}
	treeObj.reAsyncChildNodes(treeNode, reloadType, true);
}
function showLog(str) {
	if (!log_diy_async) log_diy_async = $("#log_diy_async");
	log_diy_async.append("<li class='"+className+"'>"+str+"</li>");
	if(log_diy_async.children("li").length > 4) {
		log_diy_async.get(0).removeChild(log_diy_async.children("li")[0]);
	}
}
function getTime() {
	var now= new Date();
	var h=now.getHours();
	var m=now.getMinutes();
	var s=now.getSeconds();
	var ms=now.getMilliseconds();
	return (h+":"+m+":"+s+ " " +ms);
}
var setting_diy_async = {
    id:"#treeDemo_diy_async",
     nodes:zNodes,  //数据节点指定
	async: {
		enable: true,
		url: getUrl
	},
	check: {
		enable: true
	},
	data: {
		simpleData: {
			enable: true
		}
	},
	view: {
		expandSpeed: ""
	},
	callback: {
		beforeExpand: beforeExpand,
		onAsyncSuccess: onAsyncSuccess,
		onAsyncError: onAsyncError
	}
};
var treeObj;
$(document).ready(function(){
	 treeObj = new biz.tree(setting_diy_async);//创建树

});
</script>
