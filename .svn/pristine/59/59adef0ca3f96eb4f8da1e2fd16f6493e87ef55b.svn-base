[文件路径: tree/drag_fun.html]
<script type="text/javascript">
SyntaxHighlighter.highlight("ts_drag_fun");
</script>
		
	<div class="barTitle2">
		<div class="content">示例</div>
	</div>
    <hr class="barTitleHr"/>
    <div class="ui-table ui-widget ui-corner-all ui-border">    

<div class="content_wrap">
	<div class="zTreeDemoBackground left">
		<ul id="treeDemo_drag_fun" class="ztree"></ul>
	</div>
	<div class="right">
       <ul class="info">
			<li class="title"><h2>1、copyNode / moveNode 方法操作说明</h2>
				<ul class="list">
				<li>利用 copyNode / moveNode 方法也可以实现 复制 / 移动 节点的目的，这里简单演示使用方法</li>
				<li><p>对节点进行 复制 / 剪切，试试看：<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;[ <a id="copy" href="#" title="复制" onclick="return false;">复制</a> ]
					&nbsp;&nbsp;&nbsp;&nbsp;[ <a id="cut" href="#" title="剪切" onclick="return false;">剪切</a> ]
					&nbsp;&nbsp;&nbsp;&nbsp;[ <a id="paste" href="#" title="粘贴" onclick="return false;">粘贴</a> ]</p>
				
				</ul>
			</li>
			
		</ul>
	</div>
</div>

			<!--源代码部分start-->
     	<div class="clear"></div>
		<div  class="sourceBar iconPlus mt1"><a href="#source1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码说明</a></div>
		<div  class="code" style="display: none" name="ts_drag_fun">
<pre class="brush: js;">
html部分:

&lt;ul id="treeDemo_drag_fun" class="ztree"&gt;&lt;/ul&gt;

js部分:

var zNodes =[
	{ id:1, pId:0, name:"父节点 1", open:true},
	{ id:11, pId:1, name:"叶子节点 1-1"},
	{ id:12, pId:1, name:"叶子节点 1-2"},
	{ id:13, pId:1, name:"叶子节点 1-3"},
	{ id:2, pId:0, name:"父节点 2", open:true},
	{ id:21, pId:2, name:"叶子节点 2-1"},
	{ id:22, pId:2, name:"叶子节点 2-2"},
	{ id:23, pId:2, name:"叶子节点 2-3"},
	{ id:3, pId:0, name:"父节点 3", open:true },
	{ id:31, pId:3, name:"叶子节点 3-1"},
	{ id:32, pId:3, name:"叶子节点 3-2"},
	{ id:33, pId:3, name:"叶子节点 3-3"}
];

function fontCss(treeNode) {
	var aObj = $("#" + treeNode.tId + "_a");
	aObj.removeClass("copy").removeClass("cut");
	if (treeNode === curSrcNode) {
		if (curType == "copy") {
			aObj.addClass(curType);
		} else {
			aObj.addClass(curType);
		}			
	}
}

function beforeDrag(treeId, treeNodes) {
	return false;
}

function beforeClick(treeId, treeNode) {
	return !treeNode.isCur;
}

var curSrcNode, curType;
function setCurSrcNode(treeNode) {
	
	if (curSrcNode) {
		delete curSrcNode.isCur;
		var tmpNode = curSrcNode;
		curSrcNode = null;
		fontCss(tmpNode);
	}
	curSrcNode = treeNode;
	if (!treeNode) return;

	curSrcNode.isCur = true;			
	treeDemo.cancelSelectedNode();
	fontCss(curSrcNode);
}
function copy(e) {
	
	nodes = treeDemo.getSelectedNodes();
	if (nodes.length == 0) {
		alert("请先选择一个节点");
		return;
	}
	curType = "copy";
	setCurSrcNode(nodes[0]);
}
function cut(e) {
	
	nodes = treeDemo.getSelectedNodes();
	if (nodes.length == 0) {
		alert("请先选择一个节点");
		return;
	}
	curType = "cut";
	setCurSrcNode(nodes[0]);
}
function paste(e) {
	if (!curSrcNode) {
		alert("请先选择一个节点进行 复制 / 剪切");
		return;
	}
	
	nodes = treeDemo.getSelectedNodes(),
	targetNode = nodes.length>0? nodes[0]:null;
	if (curSrcNode === targetNode) {
		alert("不能移动，源节点 与 目标节点相同");
		return;
	} else if (curType === "cut" && ((!!targetNode && curSrcNode.parentTId === targetNode.tId) || (!targetNode && !curSrcNode.parentTId))) {
		alert("不能移动，源节点 已经存在于 目标节点中");
		return;
	} else if (curType === "copy") {
		targetNode = treeDemo.copyNode(targetNode, curSrcNode, "inner");
	} else if (curType === "cut") {
		targetNode = treeDemo.moveNode(targetNode, curSrcNode, "inner");
		if (!targetNode) {
			alert("剪切失败，源节点是目标节点的父节点");
		}
		targetNode = curSrcNode;
	}
	setCurSrcNode();
	delete targetNode.isCur;
	treeDemo.selectNode(targetNode);
}

var setting_drag_fun = {
    id:"#treeDemo_drag_fun",
     nodes:zNodes,  //数据节点指定
	view: {
		selectedMulti: false
	},
	edit: {
		enable: true,
		showRemoveBtn: false,
		showRenameBtn: false
	},
	data: {
		simpleData: {
			enable: true
		}
	},
	callback: {
		beforeDrag: beforeDrag,
		beforeClick: beforeClick
	}
};
var treeDemo;
$(document).ready(function(){
	treeDemo =  new biz.tree(setting_drag_fun);//创建树
	$("#copy").bind("click", copy);
	$("#cut").bind("click", cut);
	$("#paste").bind("click", paste);
});
           </pre>

       </div>
</div>

       <!--源代码部分end-->

<script type="text/javascript">
var zNodes =[
	{ id:1, pId:0, name:"父节点 1", open:true},
	{ id:11, pId:1, name:"叶子节点 1-1"},
	{ id:12, pId:1, name:"叶子节点 1-2"},
	{ id:13, pId:1, name:"叶子节点 1-3"},
	{ id:2, pId:0, name:"父节点 2", open:true},
	{ id:21, pId:2, name:"叶子节点 2-1"},
	{ id:22, pId:2, name:"叶子节点 2-2"},
	{ id:23, pId:2, name:"叶子节点 2-3"},
	{ id:3, pId:0, name:"父节点 3", open:true },
	{ id:31, pId:3, name:"叶子节点 3-1"},
	{ id:32, pId:3, name:"叶子节点 3-2"},
	{ id:33, pId:3, name:"叶子节点 3-3"}
];

function fontCss(treeNode) {
	var aObj = $("#" + treeNode.tId + "_a");
	aObj.removeClass("copy").removeClass("cut");
	if (treeNode === curSrcNode) {
		if (curType == "copy") {
			aObj.addClass(curType);
		} else {
			aObj.addClass(curType);
		}			
	}
}

function beforeDrag(treeId, treeNodes) {
	return false;
}

function beforeClick(treeId, treeNode) {
	return !treeNode.isCur;
}

var curSrcNode, curType;
function setCurSrcNode(treeNode) {
	
	if (curSrcNode) {
		delete curSrcNode.isCur;
		var tmpNode = curSrcNode;
		curSrcNode = null;
		fontCss(tmpNode);
	}
	curSrcNode = treeNode;
	if (!treeNode) return;

	curSrcNode.isCur = true;			
	treeDemo.cancelSelectedNode();
	fontCss(curSrcNode);
}
function copy(e) {
	
	nodes = treeDemo.getSelectedNodes();
	if (nodes.length == 0) {
		alert("请先选择一个节点");
		return;
	}
	curType = "copy";
	setCurSrcNode(nodes[0]);
}
function cut(e) {
	
	nodes = treeDemo.getSelectedNodes();
	if (nodes.length == 0) {
		alert("请先选择一个节点");
		return;
	}
	curType = "cut";
	setCurSrcNode(nodes[0]);
}
function paste(e) {
	if (!curSrcNode) {
		alert("请先选择一个节点进行 复制 / 剪切");
		return;
	}
	
	nodes = treeDemo.getSelectedNodes(),
	targetNode = nodes.length>0? nodes[0]:null;
	if (curSrcNode === targetNode) {
		alert("不能移动，源节点 与 目标节点相同");
		return;
	} else if (curType === "cut" && ((!!targetNode && curSrcNode.parentTId === targetNode.tId) || (!targetNode && !curSrcNode.parentTId))) {
		alert("不能移动，源节点 已经存在于 目标节点中");
		return;
	} else if (curType === "copy") {
		targetNode = treeDemo.copyNode(targetNode, curSrcNode, "inner");
	} else if (curType === "cut") {
		targetNode = treeDemo.moveNode(targetNode, curSrcNode, "inner");
		if (!targetNode) {
			alert("剪切失败，源节点是目标节点的父节点");
		}
		targetNode = curSrcNode;
	}
	setCurSrcNode();
	delete targetNode.isCur;
	treeDemo.selectNode(targetNode);
}

var setting_drag_fun = {
    id:"#treeDemo_drag_fun",
     nodes:zNodes,  //数据节点指定
	view: {
		selectedMulti: false
	},
	edit: {
		enable: true,
		showRemoveBtn: false,
		showRenameBtn: false
	},
	data: {
		simpleData: {
			enable: true
		}
	},
	callback: {
		beforeDrag: beforeDrag,
		beforeClick: beforeClick
	}
};
var treeDemo;
$(document).ready(function(){
	treeDemo =  new biz.tree(setting_drag_fun);//创建树
	$("#copy").bind("click", copy);
	$("#cut").bind("click", cut);
	$("#paste").bind("click", paste);
});
</script>
